#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
// Row eliminated—reach dies here
// Rows 0-3: Full width glory (12 × 4 = 48)
&kp ESCAPE        &kp N1  &kp N2            &kp N3             &kp N4   &kp N5                          &kp N6           &kp N7         &kp N8         &kp N9         &kp N0     &kp EQUAL
&kp TAB           &kp B   &kp F             &kp L              &kp K    &kp Q                           &kp P            &kp G          &kp O          &kp U          &kp SLASH  &kp GRAVE
&kp MINUS         &kp N   &kp S             &kp H              &kp T    &kp M                           &kp Y            &kp C          &kp A          &kp E          &kp I      &kp NON_US_BACKSLASH
&kp LEFT_CONTROL  &kp X   &kp V             &kp J              &kp D    &kp Z                           &kp SQT          &kp W          &kp COMMA      &kp PERIOD     &kp HOME   &kp END
// Row 4: Precision surgery—4 survivors (cols 2, 3, 10, 11)
&kp LEFT_BRACKET  &kp RIGHT_BRACKET                                                                                      &kp SEMICOLON  &kp RIGHT_ALT
// Thumb clusters: 12 keys total (6 × 2)
                                                               &kp RET  &kp R         &kp LEFT_SHIFT    &kp RIGHT_SHIFT  &kp SPACE      &kp DELETE
                                                               &mo 2    &kp LEFT_GUI  &mo 1             &mo 1            &kp RIGHT_GUI  &mo 2
            >;
        };

        Numpad_Nav_Layer {
            bindings = <
// Rows 0-3: Full grid
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans    &trans    &trans     &trans  &trans
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans            &trans  &kp HOME  &kp UP    &kp END    &trans  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &trans            &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans            &trans  &trans    &trans    &trans     &trans  &trans
// Row 4: Four keys only
&trans  &kp N0                                                               &trans    &trans
// Thumb clusters
                                &trans  &trans  &trans    &trans  &trans    &trans
                                &trans  &trans  &trans    &trans  &trans    &trans
            >;
        };

        Keyboard_Control_Layer {
            bindings = <
// System control matrix
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &trans           &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans           &trans
&sys_reset   &trans        &trans        &trans        &trans        &trans                  &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &sys_reset
&bootloader  &trans        &trans        &trans        &trans        &trans                  &trans           &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &bootloader
&to 4        &trans        &trans        &trans        &trans        &trans                  &trans           &trans           &trans           &trans           &trans           &to 4
// Row 4: Layer switching lives in the center
&trans        &trans                                                                                           &trans           &trans
// Thumb clusters
                                                       &trans        &trans        &trans    &trans           &trans           &trans
                                                       &trans        &trans        &trans    &trans           &trans           &trans
            >;
        };

        Auto_Mouse_Layer {
            bindings = <
// Mouse territory
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
// Row 4: Four positions
&trans     &trans                                                                  &trans  &trans
// Thumb clusters
                                      &trans     &trans  &trans    &trans  &trans  &trans
                                      &trans     &trans  &trans    &trans  &trans  &trans
            >;
        };

        factory_test {
            bindings = <
// Test pattern—every key proves itself
&kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7            &kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3
&kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9            &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1            &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7
&kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3            &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9
// Row 4: Test the survivors
&kp N2  &kp N3                                                             &kp N8  &kp N9
// Thumb clusters tested
                                &kp N1  &kp N2  &kp N3    &kp N4  &kp N5  &kp N6
                                &kp N7  &kp N8  &kp N9    &kp N0  &kp N1  &kp N2
            >;
        };
    };
};

// right hand trackball configuration

// &trackball_peripheral_listener {
//    input-processors =
//     activate layer 3 within 500ms of the trackball moving
//     <&zip_temp_layer 3 500>;
// };

//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),
        <&zip_xy_scaler 1 3>,
        // make this trackball output scrolling events by default instead of cursor movement,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};
